/* Inherits from base.css and components.css */

/* Specific styles for the Memory Game page */
body {
  /* font-family is inherited from base.css */
  background-color: var(--background);
  color: var(--text-primary);
  /* display: flex, justify-content, align-items, height, margin are handled by .container or page structure */
}

.game-page-container h1 {
  /* Styling for h1 is largely inherited from base.css */
  margin-bottom: 1rem; /* Adjusted from base.css if needed for this page */
}

#game-status {
  /* .status class styling is inherited from base.css */
  min-height: 1.5em; /* Ensure it takes space even when empty */
  margin-bottom: 1.5rem; /* Consistent spacing */
}

.game-info-bar {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 0.75rem 1.5rem;
  background-color: var(--surface);
  border-radius: 0.5rem;
  box-shadow: var(--shadow);
  margin-bottom: 1rem;
  font-weight: 500;
}

.score-display,
.turn-display {
  color: var(--text-primary);
}

.turn-display.my-turn {
  color: var(--secondary-color); /* Highlight when it's your turn */
  font-weight: bold;
}

.game-container {
  display: grid;
  grid-template-columns: repeat(10, auto); /* 10 columns for 60 cards (30 pairs) */
  grid-gap: 8px;
  perspective: 1000px;
  max-width: 90vw; /* Max width to prevent it from being too wide */
  margin: 0 auto; /* Center the grid if it's narrower than max-width */
  padding: 1rem;
  background-color: var(--surface); /* Use surface color for the board area background */
  border-radius: 0.75rem; /* Consistent with .game-card from components.css */
  box-shadow: var(--shadow-lg); /* Consistent shadow */
}

.card {
  width: auto; /* Let the grid and aspect ratio control this */
  aspect-ratio: 1 / 1; /* Maintain square cards */
  min-width: 50px; /* Minimum size for smaller screens */
  background-color: transparent; /* The faces will have color */
  border: none; /* Remove previous border, faces can have styled borders if needed */
  display: flex; /* Already there, ensure it's kept if needed for content alignment */
  justify-content: center;
  align-items: center;
  cursor: pointer;
  transform-style: preserve-3d;
  transition: transform 0.6s ease;
  border-radius: 0.375rem; /* Slightly smaller radius for cards within the container */
}

.card.flipped {
  transform: rotateY(180deg);
}

.card .front-face,
.card .back-face {
  position: absolute;
  width: 100%;
  height: 100%;
  backface-visibility: hidden;
  display: flex;
  justify-content: center;
  align-items: center;
  border-radius: inherit; /* Inherit border-radius from .card */
  overflow: hidden; /* To ensure background image respects border-radius */
  box-shadow: var(--shadow-sm); /* Subtle shadow on card faces */
}

.card .front-face {
  background-color: var(--surface); /* Image will be on top of this */
  transform: rotateY(180deg);
  z-index: 2; /* Ensure front face is "on top" */
  /* background-image is set by JS */
  background-size: cover;
  background-position: center;
}

.card .back-face {
  background-color: var(--surface);
  background-image: url("../../images/memory-game-res/backcard.png");
  background-size: cover;
  background-position: center;
  background-repeat: no-repeat;
  color: transparent; /* Hide the ? character */
  z-index: 1; /* Ensure back face is "behind" front face */
}

/* Card matched state animation */
@keyframes matchFound {
  0% {
    transform: scale(1);
    opacity: 1;
  }
  50% {
    transform: scale(1.1);
    opacity: 0.5;
  }
  100% {
    transform: scale(0);
    opacity: 0;
  }
}

.card.matched {
  cursor: default;
  visibility: hidden; /* Hide the card but keep the space */
  animation: matchFound 0.5s ease-out forwards;
}

.card.matched .front-face,
.card.matched .back-face {
  border: none;
  box-shadow: none;
}

/* Responsive adjustments for the grid */
@media (max-width: 900px) {
  .game-container {
    grid-template-columns: repeat(8, auto);
    grid-gap: 6px;
  }
}

@media (max-width: 600px) {
  .game-container {
    grid-template-columns: repeat(6, auto);
    grid-gap: 5px;
    padding: 0.5rem;
  }
  .card .back-face {
    font-size: 1.5em;
  }
}

@media (max-width: 400px) {
  .game-container {
    grid-template-columns: repeat(5, auto);
    grid-gap: 4px;
  }
  .card .back-face {
    font-size: 1.2em;
  }
}

/* Top controls styling */
.top-controls {
  position: fixed;
  top: 1rem;
  right: 1rem;
  z-index: 1000;
  display: flex;
  gap: 0.5rem;
}

/* Override theme toggle positioning for memory game */
.theme-toggle {
  position: static !important; /* Override the fixed position from components.css */
  top: auto !important;
  right: auto !important;
}

.sound-toggle {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  padding: 0.5rem;
  background-color: var(--surface);
  border: 2px solid var(--border);
  border-radius: 0.5rem;
  cursor: pointer;
  transition: all 0.2s ease;
  color: var(--text-primary);
}

.sound-toggle:hover {
  background-color: var(--hover-bg);
}

.sound-toggle svg {
  width: 1.25rem;
  height: 1.25rem;
  stroke: currentColor;
}

.sound-text {
  display: none;
  font-size: 0.875rem;
}

@media (min-width: 640px) {
  .sound-text {
    display: inline;
  }
}
